image:
  repository: ghcr.io/akpw/mktxp
  pullPolicy: IfNotPresent
  tag: "stable-20240504055040"

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  create: true
  automount: true
  annotations: {}
  name: ""

serviceMonitor:
  enabled: false
  annotations: {}
  additionalLabels: {}
  interval: 30s
  scrapeTimeout: ""

podAnnotations: {}
podLabels: {}

podSecurityContext:
  {}
  # fsGroup: 2000

securityContext:
  {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

service:
  type: ClusterIP
  port: 49090

resources:
  limits:
    cpu: 500m
    memory: 512Mi
  requests: {}

nodeSelector: {}

tolerations: []

affinity: {}

config:
  # mktxp
  router:
    existingSecret: ""
    existingSecretKey: config
    value: |
      ## Source: https://github.com/akpw/mktxp/blob/main/mktxp/cli/config/mktxp.conf
      ## Copyright (c) 2020 Arseniy Kuznetsov

      [Sample-Router]
          enabled = False                 # turns metrics collection for this RouterOS device on / off
          hostname = localhost            # RouterOS IP address
          port = 8728                     # RouterOS IP Port
          username = username             # RouterOS user, needs to have 'read' and 'api' permissions
          password = password             # RouterOS password
          use_ssl = False                 # enables connection via API-SSL servis
          no_ssl_certificate = False      # enables API_SSL connect without router SSL certificate
          ssl_certificate_verify = False  # turns SSL certificate verification on / off
          installed_packages = True       # Installed packages
          dhcp = True                     # DHCP general metrics
          dhcp_lease = True               # DHCP lease metrics
          connections = True              # IP connections metrics
          connection_stats = False        # Open IP connections metrics
          pool = True                     # Pool metrics
          interface = True                # Interfaces traffic metrics
          firewall = True                 # IPv4 Firewall rules traffic metrics
          ipv6_firewall = False           # IPv6 Firewall rules traffic metrics
          ipv6_neighbor = False           # Reachable IPv6 Neighbors
          poe = True                      # POE metrics
          monitor = True                  # Interface monitor metrics
          netwatch = True                 # Netwatch metrics
          public_ip = True                # Public IP metrics
          route = True                    # Routes metrics
          wireless = True                 # WLAN general metrics
          wireless_clients = True         # WLAN clients metrics
          capsman = True                  # CAPsMAN general metrics
          capsman_clients = True          # CAPsMAN clients metrics
          kid_control_devices = False     # Kid Control metrics
          user = True                     # Active Users metrics
          queue = True                    # Queues metrics
          remote_dhcp_entry = None        # An MKTXP entry for remote DHCP info resolution (capsman/wireless)
          use_comments_over_names = True  # when available, forces using comments over the interfaces names
          check_for_updates = False       # check for available ROS updates

  # _mktxp
  scrapper:
    existingSecret: ""
    existingSecretKey: config
    value: |
      ## Source: https://github.com/akpw/mktxp/blob/main/mktxp/cli/config/_mktxp.conf
      ## Copyright (c) 2020 Arseniy Kuznetsov

      [MKTXP]
          port = 49090
          socket_timeout = 2
          initial_delay_on_failure = 120
          max_delay_on_failure = 900
          delay_inc_div = 5
          bandwidth = False                # Turns metrics bandwidth metrics collection on / off
          bandwidth_test_interval = 600    # Interval for colllecting bandwidth metrics
          minimal_collect_interval = 5     # Minimal metric collection interval
          verbose_mode = False             # Set it on for troubleshooting
          fetch_routers_in_parallel = False   # Set to True if you want to fetch multiple routers parallel
          max_worker_threads = 5              # Max number of worker threads that can fetch routers (parallel fetch only)
          max_scrape_duration = 10            # Max duration of individual routers' metrics collection (parallel fetch only)
          total_max_scrape_duration = 30      # Max overall duration of all metrics collection (parallel fetch only)
